{"ast":null,"code":"import _classCallCheck from \"C:/Users/lokorasli/Documents/GitHub/kadathar.github.io/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/lokorasli/Documents/GitHub/kadathar.github.io/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Hex } from \"./models/Hex\";\nimport { HexUtils } from \"./HexUtils\";\n/** This class contains static methods for generating Hex coordinates\n * for specifically-shaped grids, such as rectangle, hexagon, and more. */\nexport var GridGenerator = /*#__PURE__*/function () {\n  function GridGenerator() {\n    _classCallCheck(this, GridGenerator);\n  }\n  _createClass(GridGenerator, null, [{\n    key: \"getGenerator\",\n    value:\n    /** This method is used to dynamically choose a type of grid to\n     * generate.\n     */\n    function getGenerator(name) {\n      var x = GridGenerator[name];\n      return x;\n    }\n    /** May not be working. There are no tests for it. */\n  }, {\n    key: \"ring\",\n    value: function ring(center, mapRadius) {\n      var hexas = [];\n      var hex = HexUtils.add(center, HexUtils.multiply(HexUtils.direction(4), mapRadius));\n      for (var i = 0; i < 6; i++) {\n        for (var j = 0; j < mapRadius; j++) {\n          hexas.push(hex);\n          hex = HexUtils.neighbor(hex, i);\n        }\n      }\n      return hexas;\n    }\n    /** May not be working. There are no tests for it. */\n  }, {\n    key: \"spiral\",\n    value: function spiral(center, mapRadius) {\n      var results = [center];\n      for (var k = 1; k <= mapRadius; k++) {\n        var temp = GridGenerator.ring(center, k);\n        results = results.concat(temp);\n      }\n      return results;\n    }\n    /** Returns an array of Hex coordinates needed to create a\n     * parallelogram grid */\n  }, {\n    key: \"parallelogram\",\n    value: function parallelogram(q1, q2, r1, r2) {\n      var hexas = [];\n      for (var q = q1; q <= q2; q++) {\n        for (var r = r1; r <= r2; r++) {\n          hexas.push(new Hex(q, r, -q - r));\n        }\n      }\n      return hexas;\n    }\n    /** Returns an array of Hex coordinates needed to create a\n     * triangle grid\n     */\n  }, {\n    key: \"triangle\",\n    value: function triangle(mapSize) {\n      var hexas = [];\n      for (var q = 0; q <= mapSize; q++) {\n        for (var r = 0; r <= mapSize - q; r++) {\n          hexas.push(new Hex(q, r, -q - r));\n        }\n      }\n      return hexas;\n    }\n    /** Returns an array of Hex coordinates needed to create a\n     * Hexagon grid */\n  }, {\n    key: \"hexagon\",\n    value: function hexagon(mapRadius) {\n      var hexas = [];\n      for (var q = -mapRadius; q <= mapRadius; q++) {\n        var r1 = Math.max(-mapRadius, -q - mapRadius);\n        var r2 = Math.min(mapRadius, -q + mapRadius);\n        for (var r = r1; r <= r2; r++) {\n          hexas.push(new Hex(q, r, -q - r));\n        }\n      }\n      return hexas;\n    }\n    /** Returns an array of Hex coordinates needed to create\n     * a diagonal rectangle grid */\n  }, {\n    key: \"rectangle\",\n    value: function rectangle(mapWidth, mapHeight) {\n      var hexas = [];\n      for (var r = 0; r < mapHeight; r++) {\n        var offset = Math.floor(r / 2); // or r>>1\n        for (var q = -offset; q < mapWidth - offset; q++) {\n          hexas.push(new Hex(q, r, -q - r));\n        }\n      }\n      return hexas;\n    }\n    /** Returns an array of Hex coordinates needed to create a vertical\n     * and horizontal rectangle.\n     */\n  }, {\n    key: \"orientedRectangle\",\n    value: function orientedRectangle(mapWidth, mapHeight) {\n      var hexas = [];\n      for (var q = 0; q < mapWidth; q++) {\n        var offset = Math.floor(q / 2); // or q>>1\n        for (var r = -offset; r < mapHeight - offset; r++) {\n          hexas.push(new Hex(q, r, -q - r));\n        }\n      }\n      return hexas;\n    }\n  }]);\n  return GridGenerator;\n}();\nexport default GridGenerator;","map":{"version":3,"names":["Hex","HexUtils","GridGenerator","_classCallCheck","_createClass","key","value","getGenerator","name","x","ring","center","mapRadius","hexas","hex","add","multiply","direction","i","j","push","neighbor","spiral","results","k","temp","concat","parallelogram","q1","q2","r1","r2","q","r","triangle","mapSize","hexagon","Math","max","min","rectangle","mapWidth","mapHeight","offset","floor","orientedRectangle"],"sources":["../src/GridGenerator.tsx"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}